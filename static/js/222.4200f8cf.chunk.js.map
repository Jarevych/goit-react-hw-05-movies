{"version":3,"file":"static/js/222.4200f8cf.chunk.js","mappings":"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","sources":["api.js","pages/MoviesStyled.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9d5899cc0470980530f09016862b9ba9';\n\nexport async function fetchMovies(page) {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/day',\n      {\n        params: {\n          page: page,\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {\n    throw new Error('There is no result for your query');\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\n\nexport async function fetchSearchMovie(inputValue) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie`,\n      {\n        params: {\n          query: inputValue,\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\nexport async function fetchMovieReview(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\n","import styled from 'styled-components';\n\nexport const StyledAppContainer = styled.div`\n  .input {\n    display: flex;\n    width: 292px;\n    height: 40px;\n    font-size: 24px;\n    padding: 0;\n    padding-left: 10px;\n    border-radius: 8px;\n    border: 1px solid #0056b3;\n  }\n  .form {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    margin-top: 20px;\n    transform: translate(-193px, 0);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .searchbutton {\n    display: flex;\n    padding: 10px 20px;\n    background-color: #b3b3ef;\n    color: #000;\n    border: none;\n    border-radius: 5px;\n    text-decoration: none;\n    cursor: pointer;\n    height: 40px;\n    font-weight: 700;\n\n    &:hover {\n      background-color: #9393da;\n    }\n  }\n  .header {\n    background-color: rgb(34, 75, 153);\n  }\n  .movielist {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    flex-wrap: wrap;\n  }\n  .movieitem {\n    display: flex;\n    flex-direction: column;\n  }\n  .movietitle {\n    max-width: 250px;\n  }\n  .page-title {\n    text-align: center;\n  }\n`;\n","import { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchSearchMovie } from '../api';\nimport { StyledAppContainer } from './MoviesStyled';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const inputValue = searchParams.get(\"input\");\n  const location = useLocation();\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  const [searchResult, setSearchResult] = useState([]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const input = e.currentTarget.elements.keyword.value;\n    const query = input !== \"\" ? { input } : {};\n    setSearchParams(query);\n    e.currentTarget.reset();\n  };\n\n  useEffect (()=> {\n    if(!inputValue) return;\n    const Search = async () => {\n      try {\n        const response = await fetchSearchMovie(inputValue);\n        setSearchResult(response.results);\n      \n        if (response.total_results === 0) {\n          alert('there are no results');\n        }\n      } catch (error) {\n        console.log('помилка запиту');\n      } \n    };\n    Search()\n  },[inputValue]);\n\n  return (\n    <StyledAppContainer>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          className=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          name=\"keyword\"\n          placeholder=\"Enter movie name\"\n        />\n        <button type=\"submit\" className=\"searchbutton\">\n          Search\n        </button>\n      </form>\n      <ul className=\"movielist\">\n      {Array.isArray(searchResult) &&\n          searchResult.map(searchitem => (\n            <Link state={{ from: location }} to={`/movies/${searchitem.id}`}  key={searchitem.id}>\n              <li className=\"movieitem\">\n                <h3 className=\"movietitle\">\n                  {searchitem.title || searchitem.name || 'movie'}\n                </h3>\n                <img\n                  src={\n                    searchitem.poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${searchitem.poster_path}`\n                      : defaultImg\n                  }\n                  width={250}\n                  alt={searchitem.title ? searchitem.name : 'poster'}\n                />\n              </li>\n            </Link>\n          ))}\n      </ul>\n    </StyledAppContainer>\n  );\n}"],"names":["API_KEY","fetchMovies","page","axios","params","api_key","response","status","Error","data","fetchMovieDetails","movieId","fetchSearchMovie","inputValue","query","fetchMovieCast","fetchMovieReview","StyledAppContainer","styled","Movies","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useState","searchResult","setSearchResult","useEffect","Search","results","total_results","alert","console","log","className","onSubmit","e","preventDefault","input","currentTarget","elements","keyword","value","reset","type","autoComplete","autoFocus","name","placeholder","Array","isArray","map","searchitem","state","from","to","id","title","src","poster_path","width","alt"],"sourceRoot":""}