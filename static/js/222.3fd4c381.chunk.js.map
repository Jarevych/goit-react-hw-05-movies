{"version":3,"file":"static/js/222.3fd4c381.chunk.js","mappings":"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","sources":["api.js","pages/MoviesStyled.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9d5899cc0470980530f09016862b9ba9';\n\nexport async function fetchMovies() {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/day',\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    console.log(response.data);\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {\n    throw new Error('There is no result for your query');\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    console.log(response.data);\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\n\nexport async function fetchSearchMovie(inputValue) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie`,\n      {\n        params: {\n          query: inputValue,\n          api_key: API_KEY,\n        },\n      }\n    );\n    console.log(response.data);\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    console.log(response.data);\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\nexport async function fetchMovieReview(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n    console.log(response.data);\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\n","import styled from 'styled-components';\n\nexport const StyledAppContainer = styled.div`\n  .input {\n    display: flex;\n    width: 292px;\n    height: 40px;\n    font-size: 24px;\n    padding: 0;\n    padding-left: 10px;\n    border-radius: 8px;\n    border: 1px solid #0056b3;\n  }\n  .form {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    margin-top: 20px;\n    transform: translate(-193px, 0);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .searchbutton {\n    display: flex;\n    padding: 10px 20px;\n    background-color: #b3b3ef;\n    color: #000;\n    border: none;\n    border-radius: 5px;\n    text-decoration: none;\n    cursor: pointer;\n    height: 40px;\n    font-weight: 700;\n\n    &:hover {\n      background-color: #9393da;\n    }\n  }\n  .header {\n    background-color: rgb(34, 75, 153);\n  }\n  .movielist {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    flex-wrap: wrap;\n  }\n  .movieitem {\n    display: flex;\n    flex-direction: column;\n  }\n  .movietitle {\n    max-width: 250px;\n  }\n  .page-title {\n    text-align: center;\n  }\n`;\n","import { Link, useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { fetchSearchMovie } from '../api';\nimport { StyledAppContainer } from './MoviesStyled';\n\nexport default function Movies() {\n  const [inputValue, setInputValue] = useState(null);\n  const [searchResult, setSearchResult] = useState(null);\n  const navigate = useNavigate();\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  const handleInput = e => {\n    const input = e.target.value;\n    setInputValue(input);\n  };\n  const Search = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetchSearchMovie(inputValue);\n      setSearchResult(response.results);\n      console.log(response.total_results);\n      navigate(`/movies?search-query=${inputValue}`);\n      if (response.total_results === 0) {\n        alert('there is no result');\n      }\n    } catch (error) {\n      console.log('помилка запиту');\n    } finally {\n      setInputValue('');\n    }\n  };\n  return (\n    <StyledAppContainer>\n      <form className=\"form\" onSubmit={Search}>\n        <input\n          className=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          name=\"keyword\"\n          placeholder=\"Enter movie name\"\n          value={inputValue}\n          onChange={handleInput}\n        />\n        <button type=\"submit\" className=\"searchbutton\">\n          Search\n        </button>\n      </form>\n      <ul className=\"movielist\">\n        {Array.isArray(searchResult) &&\n          searchResult.map(searchitem => (\n            <Link to={`/movies/${searchitem.id}`} key={searchitem.id}>\n              <li className=\"movieitem\">\n                <h3 className=\"movietitle\">\n                  {searchitem.title || searchitem.name || 'movie'}\n                </h3>\n                <img\n                  src={\n                    searchitem.poster_path\n                      ? `https://image.tmdb.org/t/p/w500/${searchitem.poster_path}`\n                      : defaultImg\n                  }\n                  width={250}\n                  alt={searchitem.title ? searchitem.name : 'poster'}\n                />\n              </li>\n            </Link>\n          ))}\n      </ul>\n    </StyledAppContainer>\n  );\n}\n"],"names":["API_KEY","fetchMovies","axios","params","api_key","response","console","log","data","status","Error","fetchMovieDetails","movieId","fetchSearchMovie","inputValue","query","fetchMovieCast","fetchMovieReview","StyledAppContainer","styled","Movies","useState","setInputValue","searchResult","setSearchResult","navigate","useNavigate","Search","e","preventDefault","results","total_results","alert","className","onSubmit","type","autoComplete","autoFocus","name","placeholder","value","onChange","input","target","Array","isArray","map","searchitem","to","id","title","src","poster_path","width","alt"],"sourceRoot":""}