{"version":3,"file":"static/js/58.280b2078.chunk.js","mappings":"8SAEMA,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,gGAEoBC,EAAAA,EAAAA,IACrB,gDACA,CACEC,OAAQ,CACNF,KAAMA,EACNG,QAASL,KAPZ,UAYqB,OAVlBM,EAFH,QAYUC,OAZV,sBAaK,IAAIC,MAAM,sCAbf,gCAeIF,EAASG,MAfb,sCAiBG,IAAID,MAAM,qCAjBb,gFAqBA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBR,EAAAA,EAAAA,IAAA,6CACiBQ,GACtC,CACEP,OAAQ,CACNC,QAASL,KANZ,UAWqB,OATlBM,EAFH,QAWUC,OAXV,sBAYK,IAAIC,MAAM,sCAZf,gCAcIF,EAASG,MAdb,gHAkBA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEoBV,EAAAA,EAAAA,IAAA,4CAErB,CACEC,OAAQ,CACNU,MAAOD,EACPR,QAASL,KAPZ,UAYqB,OAVlBM,EAFH,QAYUC,OAZV,sBAaK,IAAIC,MAAM,sCAbf,gCAeIF,EAASG,MAfb,gHAkBA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA8BJ,GAA9B,gGAEoBR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,YAErB,CACEP,OAAQ,CACNC,QAASL,KANZ,UAWqB,OATlBM,EAFH,QAWUC,OAXV,sBAYK,IAAIC,MAAM,sCAZf,gCAcIF,EAASG,MAdb,gHAiBA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCL,GAAhC,gGAEoBR,EAAAA,EAAAA,IAAA,6CACiBQ,EADjB,YAErB,CACEP,OAAQ,CACNC,QAASL,KANZ,UAWqB,OATlBM,EAFH,QAWUC,OAXV,sBAYK,IAAIC,MAAM,sCAZf,gCAcIF,EAASG,MAdb,gH,qHC5EMQ,E,OAAsBC,GAAAA,IAAH,kc,SCGjB,SAASC,IACtB,IAAQR,GAAYS,EAAAA,EAAAA,MAAZT,QACR,GAAgCU,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,MAIAC,EAAAA,EAAAA,YAAU,YACRT,EAAAA,EAAAA,IAAeJ,GACZc,MAAK,SAAAnB,GACJiB,EAAYjB,EAASoB,KACtB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAI,uBACb,GACJ,GAAE,CAACnB,IACJ,IAAMoB,EAAYC,MAAMC,QAAQX,GAAYA,EAAW,GACvD,OACE,SAACL,EAAD,WACE,eAAIiB,UAAU,YAAd,SACGH,EAAUI,KAAI,SAAAC,GAAK,OAClB,gBAAIF,UAAU,YAAd,WACE,gBACEA,UAAU,aACVG,IACED,EAAME,aAAN,0CACuCF,EAAME,cArBzD,8EAwBUC,IAAKH,EAAMI,QAEb,cAAGN,UAAU,YAAb,SAA0BE,EAAMI,SAVHJ,EAAMK,QADnB,OAiB3B,C","sources":["api.js","components/CastInfoStyled.js","components/CastInfo.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9d5899cc0470980530f09016862b9ba9';\n\nexport async function fetchMovies(page) {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/trending/all/day',\n      {\n        params: {\n          page: page,\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {\n    throw new Error('There is no result for your query');\n  }\n}\n\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\n\nexport async function fetchSearchMovie(inputValue) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie`,\n      {\n        params: {\n          query: inputValue,\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\nexport async function fetchMovieReview(movieId) {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n      {\n        params: {\n          api_key: API_KEY,\n        },\n      }\n    );\n\n    if (response.status !== 200) {\n      throw new Error('There is now result for your query');\n    }\n    return response.data;\n  } catch (error) {}\n}\n","import styled from 'styled-components';\n\nexport const StyledCastContainer = styled.div`\n  .movielist {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    flex-wrap: wrap;\n    padding: 0;\n  }\n  .movieitem {\n    display: flex;\n    flex-direction: column;\n  }\n  .movietitle {\n    max-width: 250px;\n  }\n  .cast-name {\n    text-align: center;\n    font-size: 24px;\n    font-weight: 700;\n    font-family: monospace;\n  }\n  .cast-image {\n    max-width: 320px;\n    display: flex;\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../api';\nimport { useEffect, useState } from 'react';\nimport { StyledCastContainer } from './CastInfoStyled';\n\nexport default function CastDetails() {\n  const { movieId } = useParams();\n  const [castData, setCastData] = useState(null);\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    fetchMovieCast(movieId)\n      .then(response => {\n        setCastData(response.cast);\n      })\n      .catch(error => {\n        console.log('Cast details mistake');\n      });\n  }, [movieId]);\n  const castArray = Array.isArray(castData) ? castData : [];\n  return (\n    <StyledCastContainer>\n      <ul className=\"movielist\">\n        {castArray.map(cData => (\n          <li className=\"movieitem\" key={cData.cast_id}>\n            <img\n              className=\"cast-image\"\n              src={\n                cData.profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${cData.profile_path}`\n                  : defaultImg\n              }\n              alt={cData.name}\n            />\n            <p className=\"cast-name\">{cData.name}</p>\n          </li>\n        ))}\n      </ul>\n    </StyledCastContainer>\n  );\n}\n"],"names":["API_KEY","fetchMovies","page","axios","params","api_key","response","status","Error","data","fetchMovieDetails","movieId","fetchSearchMovie","inputValue","query","fetchMovieCast","fetchMovieReview","StyledCastContainer","styled","CastDetails","useParams","useState","castData","setCastData","useEffect","then","cast","catch","error","console","log","castArray","Array","isArray","className","map","cData","src","profile_path","alt","name","cast_id"],"sourceRoot":""}